% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ivreg-tidiers.R
\name{augment.ivreg}
\alias{augment.ivreg}
\title{Augment data with information from a(n) ivreg object}
\usage{
\method{augment}{ivreg}(
  x,
  data = model.frame(x),
  newdata = NULL,
  se_fit = FALSE,
  conf.int = 0.95,
  interval = c("none", "confidence", "prediction"),
  ...
)
}
\arguments{
\item{x}{An \code{ivreg} object created by a call to \code{\link[ivreg:ivreg]{ivreg::ivreg()}}.}

\item{data}{A \link[base:data.frame]{base::data.frame} or \code{\link[tibble:tibble]{tibble::tibble()}} containing the original
data that was used to produce the object \code{x}. Defaults to
\code{stats::model.frame(x)} so that \code{augment(my_fit)} returns the augmented
original data. \strong{Do not} pass new data to the \code{data} argument.
Augment will report information such as influence and cooks distance for
data passed to the \code{data} argument. These measures are only defined for
the original training data.}

\item{newdata}{A \code{\link[base:data.frame]{base::data.frame()}} or \code{\link[tibble:tibble]{tibble::tibble()}} containing all
the original predictors used to create \code{x}. Defaults to \code{NULL}, indicating
that nothing has been passed to \code{newdata}. If \code{newdata} is specified,
the \code{data} argument will be ignored.}

\item{se_fit}{Logical indicating whether or not a \code{.se.fit} column should be
added to the augmented output. For some models, this calculation can be
somewhat time-consuming. Defaults to \code{FALSE}.}

\item{conf.int}{Logical indicating whether or not to include a confidence
interval in the tidied output. Defaults to \code{FALSE}.}

\item{interval}{Character indicating the type of confidence interval columns
to be added to the augmented output. Passed on to \code{predict()} and defaults
to "none".}

\item{...}{Further arguments to be passed to \code{\link[ivreg:ivreg.fit]{ivreg::ivreg.fit()}}, e.g.
specifying an alternate variance-covariance structure. See examples}
}
\description{
Augment accepts a model object and a dataset and adds
information about each observation in the dataset. Most commonly, this
includes predicted values in the \code{.fitted} column, residuals in the
\code{.resid} column, and standard errors for the fitted values in a \code{.se.fit}
column. New columns always begin with a \code{.} prefix to avoid overwriting
columns in the original dataset.

Users may pass data to augment via either the \code{data} argument or the
\code{newdata} argument. If the user passes data to the \code{data} argument,
it \strong{must} be exactly the data that was used to fit the model
object. Pass datasets to \code{newdata} to augment data that was not used
during model fitting. This still requires that at least all predictor
variable columns used to fit the model are present. If the original outcome
variable used to fit the model is not included in \code{newdata}, then no
\code{.resid} column will be included in the output.

Augment will often behave differently depending on whether \code{data} or
\code{newdata} is given. This is because there is often information
associated with training observations (such as influences or related)
measures that is not meaningfully defined for new observations.

For convenience, many augment methods provide default \code{data} arguments,
so that \code{augment(fit)} will return the augmented training data. In these
cases, augment tries to reconstruct the original data based on the model
object with varying degrees of success.

The augmented dataset is always returned as a \link[tibble:tibble]{tibble::tibble} with the
\strong{same number of rows} as the passed dataset. This means that the
passed data must be coercible to a tibble. At this time, tibbles do not
support matrix-columns. This means you should not specify a matrix
of covariates in a model formula during the original model fitting
process, and that \code{\link[splines:ns]{splines::ns()}}, \code{\link[stats:poly]{stats::poly()}} and
\code{\link[survival:Surv]{survival::Surv()}} objects are not supported in input data. If you
encounter errors, try explicitly passing a tibble, or fitting the original
model on data in a tibble.

We are in the process of defining behaviors for models fit with various
\code{na.action} arguments, but make no guarantees about behavior when data is
missing at this time.
}
\note{
Unlike other \code{augment()} methods, \code{augment.ivreg()} only returns a
\code{.resid} column if no \code{newdata} is supplied.
}
\examples{

library(ivreg)

data("CigaretteDemand", package = "ivreg")

m <- ivreg(log(packs) ~ log(rprice) + log(rincome) | salestax + log(rincome),
           data = CigaretteDemand)

summary(m)

tidy(m)
tidy(m, conf.int = TRUE)

# Specify alternate error structures by passing through an appropriate
# "vcov" argument. Here we use HC (i.e. robust) standard errors from the
# sandwich package.
tidy(m, vcov = sandwich::vcovHC)

# By default, the stage-2 component of the 2SLS regression is returned and
# tidied. But we can easily obtain the stage-1 component instead.
tidy(m, component = "stage1")

# If only the instrumental variables from stage-1 are desired, e.g. as
# supplementary information for a regression table.
tidy(m, component = "instruments")

augment(m)
augment(m, se_fit = TRUE)
augment(m, se_fit = TRUE, interval = "confidence")
augment(m, newdata = CigaretteDemand[1:10, ], interval = "prediction")

# As with tidy.ivreg, we can specify alternate error structures by passing
# on a "vcov" argument from the sandwich package that ivreg objects 
# understand.
augment(m, se_fit = TRUE, vcov = sandwich::vcovHC)

# The "interval" and "vcov" arguments above can be combined. Among other
# things, this can be useful for visually inspecting the impact of different 
# standard errors on our model predictions.
library(ggplot2)
ggplot(
  data = augment(m, interval = 'confidence'), 
  aes(x=.rownames, y=.fitted, ymin=.lower, ymax=.upper)
  ) + 
  geom_pointrange() +
  ylim(4, 5) +
  labs(title = "Predicted values; regular standard errors")
ggplot(
  data = augment(m, interval = 'confidence', vcov = sandwich::vcovHC),
  aes(x=.rownames, y=.fitted, ymin=.lower, ymax=.upper)
  ) + 
  geom_pointrange() +
  ylim(4, 5) +
  labs(title = "Predicted values; robust standard errors")

glance(m)
# Include stage-1 diagnostics tests
glance(m, diagnostics = TRUE)
# Specify alternate error structure (e.g. HC robust standard errors)
glance(m, vcov = sandwich::vcovHC)
}
\seealso{
\code{\link[=augment]{augment()}}, \code{\link[ivreg:ivreg]{ivreg::ivreg()}}

Other ivreg tidiers: 
\code{\link{glance.ivreg}()},
\code{\link{tidy.ivreg}()}
}
\concept{ivreg tidiers}
\value{
A \code{\link[tibble:tibble]{tibble::tibble()}} with columns:
  \item{.fitted}{Fitted or predicted value.}
  \item{.resid}{The difference between observed and fitted values.}
  \item{.se.fit}{Standard errors of fitted values.}

}
